package Assignment1;

import Assignment1.gen.Assignment1.ccLexer;
import Assignment1.gen.Assignment1.ccParser;
import Assignment1.gen.Assignment1.ccVisitor;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;
import org.antlr.v4.runtime.tree.ParseTree;

import java.io.IOException;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

        // we expect exactly one argument: the name of the input file
        if (args.length!=1) {
            System.err.println("\n");
            System.err.println("cc Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename=args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        ccLexer lex = new ccLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        ccParser parser = new ccParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Object result=interpreter.visit(parseTree);
        System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "ccVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter<T> extends AbstractParseTreeVisitor<T> implements ccVisitor<T> {
    @Override
    public T visitStart(ccParser.StartContext ctx) {
        ParseTree p = ctx.children.remove(0);
        return visit(p);
    }

    @Override
    public T visitHardware(ccParser.HardwareContext ctx) {
        ParseTree p = ctx.getChild(0);
        ParseTree p1 = p.getParent().getParent().getChild(0);
        return visit(p1);
    }

    @Override
    public T visitInput(ccParser.InputContext ctx) {
        List<ParseTree> p = ctx.children;
        //String identifier = ctx.IDENTIFIER(0);
        System.out.println(p.size());
        return visit(ctx.getChild(0).getParent().getParent());
    }

    @Override
    public T visitOutput(ccParser.OutputContext ctx) {
        List<ParseTree> p = ctx.children;
        System.out.println(p.size());
        return visit(ctx.getChild(0).getParent().getParent());
    }

    @Override
    public T visitLatch(ccParser.LatchContext ctx) {
        //ctx.latches()
        return null;
    }

    @Override
    public T visitLatches(ccParser.LatchesContext ctx) {
        return null;
    }

    @Override
    public T visitUpdate(ccParser.UpdateContext ctx) {
        return null;
    }

    @Override
    public T visitUpdates(ccParser.UpdatesContext ctx) {
        return null;
    }

    @Override
    public T visitSimulate(ccParser.SimulateContext ctx) {
        return null;
    }

    @Override
    public T visitSimulations(ccParser.SimulationsContext ctx) {
        return null;
    }

    @Override
    public T visitNot(ccParser.NotContext ctx) {
        return null;
    }

    @Override
    public T visitVariable(ccParser.VariableContext ctx) {
        return null;
    }

    @Override
    public T visitParathesis(ccParser.ParathesisContext ctx) {
        return null;
    }

    @Override
    public T visitConstant(ccParser.ConstantContext ctx) {
        return null;
    }

    @Override
    public T visitBoolOr(ccParser.BoolOrContext ctx) {
        return null;
    }

    @Override
    public T visitBoolAnd(ccParser.BoolAndContext ctx) {
        return null;
    }

    @Override
    public T visitAllocate(ccParser.AllocateContext ctx) {
        return null;
    }

    // todo - Java will complain that "Interpreter" does not in fact
    // implement "ccVisitor" at the moment.

    /*public Double visitStart(ccParser.StartContext ctx){
        System.out.println("Evaluating Start");
        return visit(ctx.e);
    }
    public Double visitAdd(ccParser.AddContext ctx){
        Double d1=visit(ctx.e1);
        Double d2=visit(ctx.e2);
        System.out.println("Addition "+d1+ctx.op.getText()+d2);
        if (ctx.op.getText().equals("+"))
            return d1+d2;
        else return d1-d2;
    };
    public Double visitMult(ccParser.MultContext ctx){
        Double d1=visit(ctx.e1);
        Double d2=visit(ctx.e2);
        System.out.println("Mult "+d1+ctx.op.getText()+d2);
        if (ctx.op.getText().equals("*"))
            return d1*d2;
        else return d1/d2;
    }
    public Double visitVar(ccParser.VarContext ctx){
        System.err.println("Variables not yet supported.");
        System.exit(-1);
        return null;
    };
    public Double visitConst(ccParser.ConstContext ctx){
        return Double.valueOf(ctx.f.getText());
    }
    public Double visitParen(ccParser.ParenContext ctx){
        System.out.println("Parentheses");
        return visit(ctx.e);}*/




}

